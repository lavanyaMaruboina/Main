@isTest
public class IntegrationEngineTest {
    public static string responseVal;
    @testSetup 
    static void testDataSetup() 
    {
        Profile p = [SELECT Id FROM Profile WHERE Name='IBL CVO'];
        User u = new User(Alias = 'standt', Email='standarduser@testorg.com',MobilePhone = '9999999999',
                          EmailEncodingKey='UTF-8', LastName='Testing', LanguageLocaleKey='en_US',
                          LocaleSidKey='en_US', ProfileId = p.Id, Maker_Id__c='12',
                          TimeZoneSidKey='America/Los_Angeles',
                          UserName='standarduser4@testorg.com.psdev1');
        insert u;
        System.runAs(u){
            Opportunity opp = TestDataUtility.createTestOpportunity(false);
            opp.Deal_Number__c = 'TUT06226H';
            opp.Parent_Deal_number__c = 'DL109939';
            opp.Lead_Number__c='L-10122021-1685';
            opp.Product_Type__c = 'Passenger Vehicles';
            opp.Required_Loan_amount__c = 50000;
            if (Schema.sObjectType.Opportunity.isCreateable()){
                
                insert opp;
            }
            Applicant__c applicant = TestDataUtility.createTestApplicantForSMS(false);
            applicant.Opportunity__c=opp.Id;
            applicant.DocAuth_Application_Id__c = 'AC1241_24524353_g1';
            applicant.Date_of_Birth__c = Date.valueOf('1992-02-02');
            String dealNumber = opp.Deal_Number__c;
            String loanAppId = opp.id;
            if (Schema.sObjectType.Applicant__c.isCreateable()){
                insert applicant;
            }
            Documents__c doc = new Documents__c();
            doc.Name = 'Test document';
            doc.Document_Type__c = 'PAN';
            doc.Document_Side__c = 'Front';
            doc.Age__c = 30;
            doc.KYC_DOB__c = Date.newInstance(1993, 05, 05);
            doc.KYC_City__c = 'Mumbai';
            doc.PAN_No__c = 'testpan';
            doc.KYC_name__c = 'Test KYC Name';
            doc.KYC_No__c = Integrationutilities.getencryptedrequest('TN2020090003150',System.Label.privateKey,System.Label.ivkey);
            doc.KYC_Issuance_Date__c = Date.newInstance(2022, 05, 20);
            doc.Proof_of_Address_POA__c = true;
            doc.Proof_of_Identity_POI__c = true;
            doc.Opportunity_Relation__c = opp.Id;
            doc.Applicant__c =applicant.id;
            insert doc;
            
            
        }
        
    }
    
    private class MockSMSGatewayResponse implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setStatusCode(200);
            res.setBody(responseVal);
            return res;
        }
    }
    private class MockDoPennyDropResponse implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setStatusCode(200);
            res.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5niW2KSaHtf0ny2bNxeCmIgggm68L7Xfk9G25GdEeeEv5m/poBDwirJjARiuZT31NojszSo3sJjGEUVhO/zXnNuKQI4T6krvw3VK9MsUX0toiCk2R8PcoLRbvysRpxELIBXScKfMci3ZEml2ZH3oDkzf5bvukd5AiDBGhrJ8IbXBI76Jro78NERN8eBy/1Z4RrwoRbqsnNaU9YO38VJrn636hFCfHfgqSvmSLZDqx9f6Fc4IzOaOozSoOorvNiZSLqCFi1KrPhknM0fpo07GvwwXgni4Ke+HlB35ZhuYO215fc7sEwyymFytbFbMvZnMDk0uS6saPyNMr9mvC5e3newlGgAgyPDgJdS+pq31TW2Up9dPC10ZhShLOv1VoiH+3fTRDJi3a6JZZovbvpjZCfpjLcBqLDjvyvdkrL4fbtARyd/R5qxNYtribN+syy8GTUk="}');
            return res;
        }
    }
    private class MockDoTractorVehicleDedupeCallout implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setStatusCode(200);
            res.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ngJ/SXCnenkSTU63aZeDKmdnF4OLmcU3V9AwxIVm8yGRvHgXa+tehqkSCi3o8QriuwglTZtbRMfBsJ6taaeVTZkPOhMVufUr5CLh8utDtRQzQ=="}');
            return res;
        }
    }
      private class MockCombinedBRE implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setStatusCode(200);
            res.setBody('{"JData":"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"}');
            return res;
        }
    }

	private class MockCRIFFAPICall implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setStatusCode(200);
            res.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5nhbsSGnEOy7Ai5TEbBgZ3uJ54wvjUHpk2lskoOqH0f739CEfxfBNdgezTzrBwn0f+v0OlfGLLOGSmOC/qDikyUEvMpZtPfjFRqwr8bP9YQQ1ggNkXR568Fwpa7niw2vpq791iZyvHfQ+QZGeBc5Y/BCqtOUVsZX4vH6hra569Mz7kQi1y+UWmWCLGpWD79V5o9KnXKh/OW3ZsxM9+bdkScwndP9mMQWUPw99AALawhVkv9YD05/P2LwbIw1T+dS1z2jUbNXbajrM/N5ui9/+VZLn78x6hjy/oNjrWV4Vz2Qk9dbhEDsC/quZHY4x6tsqX4="}');
            return res;
        }
    }    
    
    private class MockTractorOfferEngine implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setStatusCode(200);
            res.setBody('{"JData":"1F3ukS89iNZyq2s85KlipY/rxwx4sxynkPHfmqcfAu8m0R9TInX6HZasYKvQxcmyK45zdRM7MtjJeEX5hLnbIiwrnuD0PmjIl3/D3HaOpEMDej2VDAnJhwl5U2EbsXjMyGmOsXIeTkCbuunzeDIaUWbvaCK/AFo4LpNM8chpPgat74NC8SVwk63bUbL6k1YTGxwy8SqDZz8eWzCYFzcsyftKSBo9p5LpqZJ4tanoXgLapAtXzG7YRylWB4fpPgyDxX68ANlwYjAddq9CHKisywELgMthcGtGp25OQHywVc2kV41LLkcQYU/zlfbxU3fwBuAIm2OVZcy0jgFDWTY+Q1qSgzsFp0egx8y2RS1V2GQo6GbsJiWL388V2lw9fNqEppYjWEzBVGG+RbWc/fW9dFo7NcXhRA4m45zwvpZY5vX3KG3l/tQeR8MSPkF0AkEtwE8Yhc+yFMwytTVqd4FLW/F70dAFryl3F2cDs+XVT8MjC8ClEntd4DO43aqCzgnrEvygeXHwVHa50mxsgV0CvXkPH5Omzb/PI4yZJwtyyyIdRBpDcnhTjWUBvEzXODUANSzZ9UDlm3AQJG8nOrpOCNlZsDLq5YS0zI4rT9vxPVX2YzI8L3IAWBEW0lVo+pDme64HrdAlyAGnbjtjJSfImUUcJEZNZHyq6hAdDKaCSZWpY0R2vP4/+MEHtA98JVCH5fBTsyBry34fhLUFnkxhWU2iYGqN8C4BReE45APWPG/+P/S9tZsLkTxOUIOEYWAd+ST3gA9TSbPI9TBpqwa3R52QDXqFoSzbjzl3VPa6oqr1posdPnpzdvpLQmHzYd1ny+f/xeyUh0NdMbhX7MeOMacg0YqJ+xvHJsWCa2KDT8Qo+g9T7Ob1dzyWmhTwexSPWz6l2IrFdDQNw6Dy7gsUgpxQpB46o/xQGEqYnsBzluokulUwakraT8aqxP8Vf35Y6gRu4f1mmcY305JmI7Cm1AcKpGhwbBMhQaTHx/Qp890u9b7tCw+Nh7iRSLHpRijiPt+jDt12W74dyoRA6jm/WNnIKtIogG5rGDvxQyskxLVm7nbg05zKhK0Mj/zXD9hIjD8sagE+EnCxP1gS18YLM4NBFzU+OWuzthvd9ajylufwebnOnwqPxVFRZPKgwo2Pu2RDZEb4OaRoenTeonJdcN24DLAC1/HDKq45jRm9jj/nngQ8dfg0d8WZVSRjB9J0KDGqnD0Pzx5MZ/q0Q9bOO6yZPoaaoBC75UfXtEbLvauMHOcW3yV5+kgEpSvcvGKt96NS46r1jFqhzSK0GFGfG2ferhVZNFY6R5ZuIveEGdStjAKVuUPQSCfL+CpH+ApmYj8ZuyyveG1rqHWSM5zuDEX/b/Xj8dDyTUm8bmaosxJuDYp5rezlXwe6ng9bVcdffiRDWZIoJpKwEEm9vkRAVQ=="}');
            return res;
        }
    } 
	private class MockdoTfGatingCheckEligibility implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setStatusCode(200);
            //res.setBody('{"JData":""}');
            res.setBody('{"JData":""}');
			return res;
        }
    }
    private class MockdoSchemeValidationCallout implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setStatusCode(200);
            res.setBody('{"JData":""}');
            return res;
        }
    }
                        
     private class MockSaveCustomerRelationDetails implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5niTO0HGpEWrGII4BTYnRVlj2t1erM5ZckcdXMrJtzLZVnPkp2n255N6IT/x02vlNVagLBnI2btrIrjglLs0FNBXxZJPx7wI01qZmBTjpgaL4A=="}');
            res.setStatusCode(200);
            return res;
        }
    }      
                        
     private class MockPincodeBasedSearchCallout implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5niTO0HGpEWrGII4BTYnRVlj2t1erM5ZckcdXMrJtzLZVnPkp2n255N6IT/x02vlNVagLBnI2btrIrjglLs0FNBXxZJPx7wI01qZmBTjpgaL4A=="}');
            res.setStatusCode(200);
            return res;
        }
    }      
    
    @isTest 
    public static void doAMLCheckCalloutTest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            
            Opportunity loanApp = [SELECT Id,Lead_number__c FROM Opportunity];
            Applicant__c applicant = [SELECT Id,DocAuth_Application_Id__c,Applicant_Number__c,Name,Opportunity__r.Lead_number__c,(SELECT Id,Proof_of_Address_POA__c,Proof_of_Identity_POI__c, KYC_DOB__c, KYC_City__c FROM Documents__r WHERE KYC_DOB__c != NULL AND KYC_City__c != NULL AND (Proof_of_Address_POA__c = true OR Proof_of_Identity_POI__c = true)) FROM Applicant__c ];
            System.debug('applicant ---> ' + applicant);
            Continuation con = (Continuation)IntegrationEngine.doAMLCheckCallout(applicant.Id,loanApp.Id);
            
            Map<String, HttpRequest> requests = con.getRequests();
            //system.assert(requests.size() == 1);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            response.setStatusCode(200);

            String continuationLabel = IntegrationEngine.continuationLabel;
            System.debug('continuationLabel ---> ' + continuationLabel);
            String membershipResponse = '';
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            Test.setContinuationResponse(continuationLabel, response);
            membershipResponse = (String)IntegrationEngine.processAMLCheckAPIResponse(labels, IntegrationEngine.continuationState);
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
            
            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    
    @isTest 
    public static void doDealMasterCalloutForCustomerNameTest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            
            Opportunity loanApp = [SELECT Id,Lead_number__c,Deal_Number__c FROM Opportunity];
            Applicant__c applicant = [select Id, Opportunity__c FROM Applicant__c ];
            
            Continuation con = (Continuation)IntegrationEngine.doDealMasterCalloutForCustomerName(loanApp.Deal_Number__c,loanApp.Id);
            System.debug('con ---> ' + con);
            Map<String, HttpRequest> requests = con.getRequests();
            //system.assert(requests.size() == 1);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            String membershipResponse = '';
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            Test.setContinuationResponse(continuationLabel, response);
            membershipResponse = (String)IntegrationEngine.processDealMasterAPIResponse(labels, IntegrationEngine.continuationState);
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assert(ex.getMessage().contains('List has no rows for assignment to SObject'));
        }
    }
    
    
    @isTest  
    public static void doNeSLAgreementStatusCalloutTest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            
            Opportunity loanApp = [SELECT Id,Lead_number__c FROM Opportunity];
            Applicant__c applicant = [SELECT Id,Opportunity__r.Parent_Deal_number__c,Opportunity__r.Deal_number__c FROM Applicant__c ];
            System.debug('applicant ---> ' + applicant);
            Continuation con = (Continuation)IntegrationEngine.doNeSLAgreementStatusCallout(applicant.Id,loanApp.Id);
            
            Map<String, HttpRequest> requests = con.getRequests();
            //system.assert(requests.size() == 1);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            System.debug('continuationLabel ---> ' + continuationLabel);
            String membershipResponse = '';
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            Test.setContinuationResponse(continuationLabel, response);
            membershipResponse = (String)IntegrationEngine.processNeSLAgreementStatusAPIResponse(labels, IntegrationEngine.continuationState);
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
            
            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    @isTest 
    public static void doNeSLAgreementStatusCalloutTest1(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            
            Opportunity loanApp = [SELECT Id,Lead_number__c FROM Opportunity];
            Applicant__c applicant = [SELECT Id,Opportunity__r.Parent_Deal_number__c,Opportunity__r.Deal_number__c FROM Applicant__c ];
            System.debug('applicant ---> ' + applicant);
            Continuation con = (Continuation)IntegrationEngine.doNeSLAgreementStatusCallout(applicant.Id,loanApp.Id);
            
            Map<String, HttpRequest> requests = con.getRequests();
            //system.assert(requests.size() == 1);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            System.debug('continuationLabel ---> ' + continuationLabel);
            String membershipResponse = '';
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            Test.setContinuationResponse(continuationLabel, response);
            membershipResponse = (String)IntegrationEngine.processNeSLAgreementStatusAPIResponse(labels, IntegrationEngine.continuationState);
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
            
            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    
    @isTest 
    public static void doStampingDetailsCalloutTest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            
            Opportunity loanApp = [SELECT Id,Deal_number__c,Product_Type__c,Lead_number__c,Finance_Amount__c FROM Opportunity];
            Applicant__c applicant = [SELECT Id,Opportunity__r.Parent_Deal_number__c,Opportunity__r.Deal_number__c FROM Applicant__c ];
            System.debug('applicant ---> ' + applicant);
            Continuation con = (Continuation)IntegrationEngine.doStampingDetailsCallout(applicant.Id,loanApp.Id,'33',null);
            
            Map<String, HttpRequest> requests = con.getRequests();
            //system.assert(requests.size() == 1);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            System.debug('continuationLabel ---> ' + continuationLabel);
            String membershipResponse = '';
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            Test.setContinuationResponse(continuationLabel, response);
            membershipResponse = (String)IntegrationEngine.processStampingDetailsAPIResponse(labels, IntegrationEngine.continuationState);
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
            
            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    
    @isTest 
    public static void doStampingDetailsCalloutTest1(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            
            Opportunity loanApp = [SELECT Id,Deal_number__c,Product_Type__c,Lead_number__c,Finance_Amount__c FROM Opportunity];
            Applicant__c applicant = [SELECT Id,Opportunity__r.Parent_Deal_number__c,Opportunity__r.Deal_number__c FROM Applicant__c ];
            System.debug('applicant ---> ' + applicant);
            Continuation con = (Continuation)IntegrationEngine.doStampingDetailsCallout(applicant.Id,loanApp.Id,'33','');
            
            Map<String, HttpRequest> requests = con.getRequests();
            //system.assert(requests.size() == 1);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            response.setStatusCode(250);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            System.debug('continuationLabel ---> ' + continuationLabel);
            String membershipResponse = '';
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            Test.setContinuationResponse(continuationLabel, response);
            membershipResponse = (String)IntegrationEngine.processStampingDetailsAPIResponse(labels, IntegrationEngine.continuationState);
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
            
            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    
    
    @isTest 
    public static void doIHMReceiptCalloutTest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            
            Opportunity loanApp = [SELECT Id,Lead_number__c FROM Opportunity];
            Applicant__c applicant = [SELECT Id,Opportunity__r.Deal_number__c FROM Applicant__c ];
            System.debug('applicant ---> ' + applicant);
            Continuation con = (Continuation)IntegrationEngine.doIHMReceiptCallout(applicant.Id,loanApp.Id,null);
            
            Map<String, HttpRequest> requests = con.getRequests();
            //system.assert(requests.size() == 1);
            // Create a mock response
            // HttpResponse response = new HttpResponse();
            // response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            // response.setStatusCode(200);
            
            //String continuationLabel = IntegrationEngine.continuationLabel;
            //System.debug('continuationLabel ---> ' + continuationLabel);
            String membershipResponse = '';
            //List<String> labels = new List<String>{continuationLabel};
            //  Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            //Test.setContinuationResponse(continuationLabel, response);
            // membershipResponse = (String)IntegrationEngine.processDealMasterAPIResponse(labels, IntegrationEngine.continuationState);
            
            HttpResponse response = new HttpResponse();
            String body = '{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5njZcJY00rL9wJSIMpbrzEBGczzs/qwlKFOA2/srolJ6l1djQPyCsWPhGnh7CqucCWPqwsLVYtyAskLBb8ekrCuVrKDeBNiojndyKtLQoX7upFsTrRkJmZJNIgdkS7hNrJigY5/m9JrXCt+K6YQwxMDFlsL3BshrRI8XlQdZTrUgYg=="}'; 
            response.setBody(body);
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            //Object continuationState= IntegrationEngine.continuationState; 
            List<String> labels = new List<String>{continuationLabel};
                
                Object continuationState= IntegrationEngine.continuationState; 
            membershipResponse = (String)IntegrationEngine.processIHMReceiptResponse(labels, IntegrationEngine.continuationState);
            
            System.debug('labels===>'+labels);
            System.debug('continuationState===>'+continuationState);
            
            
            Test.setContinuationResponse(continuationLabel, response);
            //Object result3 = aml.processSMSGatewayResponse(labels, aml.continuationState);
            
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            //System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
            
            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    @isTest 
    public static void doRCLimitCheckCalloutTest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            Opportunity optg1 = new Opportunity();
            optg1.StageName = 'Loan Details';
            optg1.CloseDate = Date.newInstance(2022, 1, 11);
            optg1.Name = 'testone';
            optg1.Vehicle_Type__c = 'New';
            optg1.Product_Type__c = 'Passenger Vehicles';
            optg1.Ben_Code__c = 'optg2';
            optg1.Vehicle_Sub_Category__c = 'UOM';
            optg1.Agent_BL_code__c = 'BLC';
            optg1.Funded__c = false;
            optg1.Is_customer_interested_in_a_motor_insura__c = true;
            optg1.Motor_Insurance_Premium__c = 20000;
            optg1.Sub_Stage__c = 'Business Payment Details';
            
            insert optg1;
            
            Applicant__c objApplicant = new Applicant__c();
            objApplicant.Opportunity__c = optg1.Id;
            objApplicant.Applicant_Type__c = 'Borrower';
            objApplicant.Contact_number__c = '1234567890';
            insert objApplicant;
            
            Test.startTest();
            IntegrationEngine.doRCLimitCheckCallout(objApplicant.Id, optg1.Id,null);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    @isTest 
    public static void doRCLimitCheckCalloutForDealerOrDSATest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            Opportunity optg1 = new Opportunity();
            optg1.StageName = 'Loan Details';
            optg1.CloseDate = Date.newInstance(2022, 1, 11);
            optg1.Name = 'testone';
            optg1.Vehicle_Type__c = 'New';
            optg1.Product_Type__c = 'Passenger Vehicles';
            optg1.Ben_Code__c = 'optg2';
            optg1.Vehicle_Sub_Category__c = 'UOM';
            optg1.Agent_BL_code__c = 'BLC';
            optg1.Funded__c = false;
            optg1.Is_customer_interested_in_a_motor_insura__c = true;
            optg1.Motor_Insurance_Premium__c = 20000;
            optg1.Sub_Stage__c = 'Business Payment Details';
            
            insert optg1;
            
            Applicant__c objApplicant = new Applicant__c();
            objApplicant.Opportunity__c = optg1.Id;
            objApplicant.Applicant_Type__c = 'Borrower';
            objApplicant.Contact_number__c = '1234567890';
            insert objApplicant;
            
            Test.startTest();
            IntegrationEngine.doRCLimitCheckCalloutForDSAOrDealer(objApplicant.Id, optg1.Id,'Dealer',null);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    @isTest 
    public static void doSmsGatewayAPITest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE username='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1]; 
            Opportunity loanApp = [SELECT Id,Lead_number__c,Deal_number__c FROM Opportunity];
            System.debug('loanApp::' + loanApp);
            Applicant__c applicant = [SELECT Id,Contact_number__c,Whatsapp_number__c,OTP_for_borrower__c,Opportunity__r.Deal_number__c,Opportunity__r.Lead_number__c FROM Applicant__c LIMIT 1];
            System.debug('applicant::' + applicant);
            String statusCheckString = '{"enachStatus":"00671000001 ", "applicantId":"'+applicant.Id+'" ,"loanApplicationId":"'+loanApp.Id+'", "flag":"LAS"}'; 
            responseVal = '{"enachStatus":"00671000001 ", "applicantId":"'+applicant.Id+'" ,"loanApplicationId":"'+loanApp.Id+'", "flag":"LAS"}'; 

            RequestWrapper requestWrapper = new RequestWrapper();
            requestWrapper.applicantId = applicant.ID;
            system.debug('requestWraper in test class>>'+requestWrapper);
            
                    Test.setMock(HttpCalloutMock.class, new MockSMSGatewayResponse());
            
            String str1 = IntegrationEngine.doSmsGatewayAPI(statusCheckString);
            
            HttpResponse response = new HttpResponse();
            response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ng/DZCG559eHYwynGh3m3kpuywLZET1DqqOzmR2Ko2z06E/CLbdl3PjIPBUdzm3WvWeOWPbqKvSBm48N5LS4vy4VfpvD4M0jl1J1OlJK+Zx+X326SRlbJxcTImhh1gwXa05SExDifebbRABcCtMAHqmdNeq6DS0TTcQNiKDhkiV4pKg9vemcOKL9PvgP2P/YeAIQOoqetiRtV45RLTdYScv/11BWP6/0AM6LQTtDzp3+oUAZkV8hJluV3uCxuERC2tp8L2Jscx4jkWwalbiBjSmRS7h0VHkpmMy7728h+PkHLRSSjebpTw8CQRnpf3l8eI=');            
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            System.debug('continuationLabel ---> ' + continuationLabel);
            String membershipResponse = '';
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;   
            Test.startTest();
            
            Test.setContinuationResponse(continuationLabel, response);
            RequestWrapper requestWrapper1 = (RequestWrapper)IntegrationUtilities.parseJSONRequest('xyz','RequestWrapper');
            Test.stopTest();
            String responseExpected ='{"response":{"status":"SUCCESS","respDesc":"Deal Master","content":[{"DealNumber":"","DealNoExists":"No","StatusFlag":" ","Engine_Number":"","Chassis_Number":"","Make":"","Model":"","Variant":"","Manufacture_Year_Month":"","Owner_Name":"","No_of_Ownership":"0"}]}}';
            System.assertEquals(responseExpected, membershipResponse,'SUCCESS');
            
            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
            //System.assertEquals('Script-thrown exception', ex.getMessage());
        }
    }
    
    @isTest
    public static void doSmsGatewayCalloutTest1(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1];
            
            Applicant__c applicant = [SELECT Id, Opportunity__c FROM Applicant__c LIMIT 1];
            
            
            
            String str = '{"applicantId":"'+applicant.Id+'"  ,"loanApplicationId":"'+applicant.Opportunity__c+'", "flag":"LAS"}';
            Continuation con = (Continuation)IntegrationEngine.doSmsGatewayCallout(str);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            String body = '{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5njZcJY00rL9wJSIMpbrzEBGczzs/qwlKFOA2/srolJ6l1djQPyCsWPhGnh7CqucCWPqwsLVYtyAskLBb8ekrCuVrKDeBNiojndyKtLQoX7upFsTrRkJmZJNIgdkS7hNrJigY5/m9JrXCt+K6YQwxMDFlsL3BshrRI8XlQdZTrUgYg=="}';
            response.setBody(body);
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;
            String smsCallOutResponse;
            system.runAs(u){
                Test.startTest();
                Test.setContinuationResponse(continuationLabel, response);
                smsCallOutResponse = (String)IntegrationEngine.processSMSGatewayResponse(labels, IntegrationEngine.continuationState);
                smsCallOutResponse = (String)IntegrationEngine.processCIBILReportResponse(labels, IntegrationEngine.continuationState);
                
                Test.stopTest();
            }
            String responseExpected ='SUCCESS';
            System.assertEquals(responseExpected, smsCallOutResponse, 'SUCCESS');
        } catch(Exception ex){
            //System.assert(ex.getMessage().contains('List has no rows for assignment to SObject'));
        }
    }
    
    
    @isTest
    public static void doCIBILReportCalloutTest(){
        try{
            User u = [SELECT Id,usertype FROM User WHERE UserName='standarduser4@testorg.com.psdev1' AND IsActive = true LIMIT 1];
            
            Applicant__c applicant = [SELECT Id, Opportunity__c FROM Applicant__c LIMIT 1];
            
            String str = '{"applicantId":"'+applicant.Id+'"  ,"loanApplicationId":"'+applicant.Opportunity__c+'", "flag":"LAS"}';
            
            CIBIL_Details__c cd= new CIBIL_Details__c();
            cd.Applicant__c = applicant.Id;
            insert cd;
            
            Customer_dedupe_response__c cdr= new Customer_dedupe_response__c();
             cdr.Applicant__c = applicant.Id;
            insert cdr;
            
            Continuation con = (Continuation)IntegrationEngine.doCIBILReportCallout(str);
            // Create a mock response
            HttpResponse response = new HttpResponse();
            String body = '{"JData":"cfLwy4XH9xgyWwsJOpkttOMRh0OH+MnUTITHHRsMuwIoJqyOVxQYJIqDebSpWaTaw+Cq+Gszx63fza8Q1G5GRDgKGQEd8ZFBsV8nUV3V6bL4m/SZGXLqJ9SKiDYwsgpVJWxDe+PeoutRu0qCP/++NN8++SD9ysW6xpmkPQlP2C6jP5DDY1BOa5iBS5wvy+YvqgyclNBQnv+sUUliwc/otoSWOfk8aaMPOkYYMD1UrB7jm7dA1gfBNC9ni+Jjq6lb+HXvsiZuvwaQbhiILYZhA00iZKMzXZf/71AzGl7yCA9I7O8IrLB32DV2n/GJCQyJYcd8M0PesVdpqJVgjDMourwzadyqS2gTY53SJcTthsixtgOCmPD6NCgZzHU6uvT/cnjyT0b7PwNQfo0x6wUdZFEhxnIJwZKEUuXLPiETwRsyrBFo4N5YKEjr6W1BDU6AuUzSpVvNwAd6YV8fgBgOkFNPUVcUlJrvuIXDkaTe25juRrdrQTCQNyqGYAi55+MtTntflSdle333EjhDNnEcOPuyW8oJPxEUUzPtcqIk9Ui27plSKgQ0brsLXebL+IcW7Kli4C2UX8O9lwJOmwvptdgBOzo+CjE1ZKDPFd2ny/p5QSHO7cVHdVcOpfNQtRJkKjM3QfnoukjPp3hpIVrGzr4WujdmXdaTISJ0iQZXZTPvKbTgZ8estux+P2VHQo9MLXSq6Nlt5k7GNc9JQ9g6H3sxjZ51mfSFJM8D2t+d7QtUb0IyoDkaDItzbGIz6cRADrVV5nbssgEi44KjwG60LJ1PZg0Ku1dkkAyRqc7P0s2hrpIIPcChY6hXJMZmEJ5Xaj+NDArQ0S4vTlM44WQgqokXOZaorCVt8ijT5DUWMKVSXyja8zXEtQ4CTsSQQYqmsuPiG5CTdxTY7lw3LizQngwwJEfMlaHDP58DwpZW0+mTx8JkyzGPen5dIQ3y19eWH+fbUBSNZEnS/tB2hhcegwRcz0Uabsb1IhXS05etbRemddxrNDoGZPTXOZYPmIOyNUa1XdOmM+Ck5FUoUS/powmfuezC721cHcJfVNl9V+FTfvmJYwWLc6Wvm+3Et/wEKzsW5cjdCLVINaj3/zUwfgD0YTSwGJlupA8pNDAcj/gX5AwlcEUAVOLiPv0iZoVx2/0Gj+cfFcdeJtuURMXhScjTreLt2jhKLXsWKF0qBO/Fiw3mZRiOyXO+A81W/Ndbc/htF48W/hTman3UL6siAafsy70UptgaiU+K5xLBx4623lfVcjkOXqlXSbbDM9/uFOLk9mm6KXSwiET43BEZjKzy+PJev3iuWziavi5jOuTvE1aWyEJU9yWALYQ6OqrKraU6TDO3bk5dt+z8UZBD2h6toGEps8XEIf/okIC7y8jq2keMKoMLW5y1YCbeloUGP1bUslT5uqRmxsZukDX7miZXxN4obQNZOulHLMAJ5wPrjNi6W/4U47mZwDG1Ju0zcIw0622OFgfu63m4/KvS2BmMq/O1ckG1TwnM07vlRKJMx/qshzbQfsubXH8R9oD62dJojxLmxdFzUQ4L676xxV6pTN8rOdytSB1G44YV0PsA8YZVfaJoGzETPDCOuVhRUO87j50doMdMGZPVaaX0eRuqKJDMQ9cEJNjiNBVNKLr+k0dVzDpS3L2H+aDGMJXjRp8r+HIqPkISE/QzuNxzXzPxEWnwd7G98kom2qQysD/ivLzsUgjxzjx/P9W+b4GQDJey+ggEt4ea1lY2cPXtnjcwr/isj3HFxjLt52cH5LbeEw4w5/T6GbVhw0XwiSZKFF7a+/A+EuLXUBhgfKwSbLy8X0E8xVTB58AWjwIzfMxNRKSypMtjHc+Lg8qFjPxoCYn8/A2DZbllNz8aVNVPHr/gKOrejx1FTePh2X+Xn6R6Qn7A6djH9vQ7ghZWa4aR16CeOTD0XxnceiPYueflJuuBDYkDCMOb9d9BC4TS0o1Uq6uXNkNLG6FYj3fzBFDdE1zI9eMd60wDeGb/iDrl5QHznbYvN9B0mPgfMIUkTsY="}	'; 
            response.setBody(body);
            response.setStatusCode(200);
            
            String continuationLabel = IntegrationEngine.continuationLabel;
            List<String> labels = new List<String>{continuationLabel};
                Object continuationState= IntegrationEngine.continuationState;
            String smsCallOutResponse;
            system.runAs(u){
                Test.startTest();
                Test.setContinuationResponse(continuationLabel, response);
                smsCallOutResponse = (String)IntegrationEngine.processCIBILReportResponse(labels, IntegrationEngine.continuationState);
                Test.stopTest();
            }
            
        } catch(Exception ex){
            //System.assert(ex.getMessage().contains('List has no rows for assignment to SObject'));
        }
    }
    
    @isTest
    public static void doCrosscoreTest(){
     
               // Test method to cover successful callout scenario
        Integration_Configuration__mdt mockApiConfiguration = new Integration_Configuration__mdt(
            MasterLabel = 'Test Configuration',
            Endpoint_URL__c = 'https://test.endpoint.com',
            Rest_Method__c = 'POST',
            Timeout__c = integer.valueof('30'),
            IsActive_Integration__c = true
        );
        

       // IND_CrosscoreRequest mockCrosscoreRequest = new IND_CrosscoreRequest(); // Create a mock Crosscore request object
        // Populate mockCrosscoreRequest with necessary data

        Test.startTest();
        // Set mock callout response
       // Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator());

        // Call the method to be tested
        String result = IntegrationEngine.doCrosscore('loanApplicationId', new List<String>{'beneficiaryId'}, 'batchIndex');
        Test.stopTest();

        // Add assertions here based on the expected behavior
        // For example:
       // System.assertNotEquals(null, result);
        // Add more assertions as needed
    }

    // Test method to cover the scenario when the API configuration is inactive
    @isTest
    static void testInactiveConfiguration() {
        // Create test data
        Integration_Configuration__mdt mockApiConfiguration = new Integration_Configuration__mdt(
            MasterLabel = 'Test Configuration',
            Endpoint_URL__c = 'https://test.endpoint.com',
            Rest_Method__c = 'POST',
            Timeout__c = integer.valueof('30'),
            IsActive_Integration__c = false // Set to inactive
        );
       

        // Call the method to be tested
        String result = IntegrationEngine.doCrosscore('loanApplicationId', new List<String>{'beneficiaryId'}, 'batchIndex');

        // Add assertions here based on the expected behavior when the configuration is inactive
        // For example:
       // System.assertEquals(null, result);
        // Add more assertions as needed
    }

    // Add more test methods to cover other scenarios as needed

@isTest
    Static void doFicoDeviationCalloutTractor_Test(){
// Test method to cover successful callout scenario
 
     // Create test data
        Opportunity opp = new Opportunity(
            
            // Populate Opportunity fields as needed
            // Opportunity opp = TestDataUtility.createTestOpportunity(false);
            name='test',
            Deal_Number__c = 'TUT06226H1',
            Parent_Deal_number__c = 'DL1099390',
            Lead_Number__c='L-10122021-16858',
            Product_Type__c = 'Passenger Vehicless',
            Required_Loan_amount__c = 50000,
            StageName='qualification',
            closedate=date.today()
        );
        insert opp;

        // Mock the getAPIConfiguration method to return a mock Integration_Configuration__mdt
        Integration_Configuration__mdt mockApiConfiguration = new Integration_Configuration__mdt(
            // Populate Integration_Configuration__mdt fields as needed
        );
        Test.startTest();
       // Test.setMock(IntegrationUtilities.MockGetAPIConfiguration.class, new IntegrationUtilities.MockGetAPIConfiguration(mockApiConfiguration));

        // Mock the getStubResponse method if needed

        // Mock the IND_FicoDeviationServiceTractor.getFicoDeviationRequest method to return a mock IND_FicoDeviationRequestTractor
       // IND_FicoDeviationRequestTractor mockFicoDeviationRequest = new IND_FicoDeviationRequestTractor(
            // Populate IND_FicoDeviationRequestTractor fields as needed
        //);
       // Test.setMock(IND_FicoDeviationServiceTractor.class, new IND_FicoDeviationServiceTractor(mockFicoDeviationRequest));

        // Mock any other necessary methods or data

        // Call the method to be tested
        Object result = IntegrationEngine.doFicoDeviationCalloutTractor(opp.id, 'flag');
        Test.stopTest();

        // Add assertions here based on the expected behavior
        // For example:
        //System.assertNotEquals(null, result);
        // Add more assertions as needed
    }

    // Test method to cover error handling scenario
    @isTest
    static void testErrorHandling() {
        // Mock the getAPIConfiguration method to throw an exception
        Test.startTest();
        //Test.setMock(IntegrationUtilities.MockGetAPIConfiguration.class, new IntegrationUtilities.MockGetAPIConfiguration(new Exception('Mock exception')));

        // Call the method to be tested
        try {
          IntegrationEngine.doFicoDeviationCalloutTractor('loanAppId', 'flag');
            // Add assertions for failure handling if necessary
        } catch(Exception e) {
            // Add assertions for exception handling if necessary
        }
        Test.stopTest();
    }

    // Add more test methods to cover other scenarios as needed

	@isTest
    static void doPennyDropAPICallout_Test(){
        try{
        Opportunity opp = [Select Id from Opportunity LIMIT 1];
        String requestBody ='{"request":{"BeneficiaryName":"Test Beneficiary","CreditAccountNumber":"1234567890123","BeneficiaryBankIFSCCode":"HDFC00001732","BeneficiaryMobileNumber":"8123456789","EmailID":"test@gmail.com","CustomerCode":"SU234567","DealNo":"AAT00001","MakerId":"1001"}}';
        String responseVal = '{"response":{"status":"SUCCESS","respDesc":"Transaction Details Validated","content":[{"IBLRefNo":"S02030000375284","CustomerRefNo":"0203202419025421454","Amount":"1","StatusCode":"R000","StatusDesc":"SUCCESS","UTRNo":"406219288017","BeneficiaryName":"Metals and Minerals Trading Corporation of India - Precious Metals and Precious Stones","TranType":"IMPS"}]}}';
   
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockDoPennyDropResponse());
            IntegrationEngine.PennyDropAPIResponse responseWrapper = new IntegrationEngine.PennyDropAPIResponse(); 
            responseWrapper = IntegrationEngine.doPennyDropAPICallout(requestBody, opp.Id);
            HttpResponse response = new HttpResponse();
            //response.setBody('JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5niW2KSaHtf0ny2bNxeCmIgggm68L7Xfk9G25GdEeeEv5m/poBDwirJjARiuZT31NojszSo3sJjGEUVhO/zXnNuKQI4T6krvw3VK9MsUX0toiCk2R8PcoLRbvysRpxELIBXScKfMci3ZEml2ZH3oDkzf5bvukd5AiDBGhrJ8IbXBI76Jro78NERN8eBy/1Z4RrwoRbqsnNaU9YO38VJrn636hFCfHfgqSvmSLZDqx9f6Fc4IzOaOozSoOorvNiZSLqCFi1KrPhknM0fpo07GvwwXgni4Ke+HlB35ZhuYO215fc7sEwyymFytbFbMvZnMDk0uS6saPyNMr9mvC5e3newlGgAgyPDgJdS+pq31TW2Up9dPC10ZhShLOv1VoiH+3fTRDJi3a6JZZovbvpjZCfpjLcBqLDjvyvdkrL4fbtARyd/R5qxNYtribN+syy8GTUk=');
            response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5niW2KSaHtf0ny2bNxeCmIgggm68L7Xfk9G25GdEeeEv5m/poBDwirJjARiuZT31NojszSo3sJjGEUVhO/zXnNuKQI4T6krvw3VK9MsUX0toiCk2R8PcoLRbvysRpxELIBXScKfMci3ZEml2ZH3oDkzf5bvukd5AiDBGhrJ8IbXBI76Jro78NERN8eBy/1Z4RrwoRbqsnNaU9YO38VJrn636hFCfHfgqSvmSLZDqx9f6Fc4IzOaOozSoOorvNiZSLqCFi1KrPhknM0fpo07GvwwXgni4Ke+HlB35ZhuYO215fc7sEwyymFytbFbMvZnMDk0uS6saPyNMr9mvC5e3newlGgAgyPDgJdS+pq31TW2Up9dPC10ZhShLOv1VoiH+3fTRDJi3a6JZZovbvpjZCfpjLcBqLDjvyvdkrL4fbtARyd/R5qxNYtribN+syy8GTUk="}');
            response.setStatusCode(200);
            system.debug('responseWrapper-----'+responseWrapper);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }

@isTest
    static void doTractorVehicleDedupeCallout_Test(){
        try{
        Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c from Opportunity LIMIT 1];
           /* opp.StageName = 'Credit Processing';
            opp.Sub_Stage__c = 'View Application Details';
            opp.View_Application_Sub_Stages__c = 'Lead/KYC Details';
            update opp; */
       		String engNo = '006HF0000095x3yYAA';
            String chassisNo = '123456789';
            String serial_No = '12345';
            String subType = 'Tractor';
            String vehicleType = 'New';
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockDoTractorVehicleDedupeCallout());
            String str = IntegrationEngine.doTractorVehicleDedupeCallout(engNo,chassisNo,serial_No,subType,opp.Id,vehicleType); 
            HttpResponse response = new HttpResponse();
            response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5ngJ/SXCnenkSTU63aZeDKmdnF4OLmcU3V9AwxIVm8yGRvHgXa+tehqkSCi3o8QriuwglTZtbRMfBsJ6taaeVTZkPOhMVufUr5CLh8utDtRQzQ=="}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }    
    
    
@isTest
    static void cRIFFAPICall_Test(){
        try{
        Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c from Opportunity LIMIT 1];
            opp.Class_of_Activity__c = 'Education';
            update opp;
            Applicant__c app = [Select Id,Applicant_Type__c from Applicant__c where Opportunity__c =:opp.Id LIMIT 1];
            app.Applicant_Type__c = 'Borrower';
            update app;
            TBM_CRIF_Class_of_Activity__c tbm = new TBM_CRIF_Class_of_Activity__c();
            tbm.Code__c = 3;
            tbm.Value__c = 'Education';
            insert tbm;
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockCRIFFAPICall());
            String str = IntegrationEngine.cRIFFAPICall(opp.Id,app.Id); 
            HttpResponse response = new HttpResponse();
            response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5nhbsSGnEOy7Ai5TEbBgZ3uJ54wvjUHpk2lskoOqH0f739CEfxfBNdgezTzrBwn0f+v0OlfGLLOGSmOC/qDikyUEvMpZtPfjFRqwr8bP9YQQ1ggNkXR568Fwpa7niw2vpq791iZyvHfQ+QZGeBc5Y/BCqtOUVsZX4vH6hra569Mz7kQi1y+UWmWCLGpWD79V5o9KnXKh/OW3ZsxM9+bdkScwndP9mMQWUPw99AALawhVkv9YD05/P2LwbIw1T+dS1z2jUbNXbajrM/N5ui9/+VZLn78x6hjy/oNjrWV4Vz2Qk9dbhEDsC/quZHY4x6tsqX4="}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }           

@isTest
    static void combinedBRE_Test(){
        try{
        Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c from Opportunity LIMIT 1];            
            Vehicle_Detail__c  vehicleDetail1 = TestDataUtility.createTestVehicleDetailForIbb(false, opp);
            vehicleDetail1.Vehicle_Type__c = 'New';
            vehicleDetail1.Variant_Code__c = 'TEICH364TR';
            vehicleDetail1.Vehicle_SubType__c = 'Tractor';
            vehicleDetail1.Variant__c = 'EICHER 364DI 35HP';
            insert vehicleDetail1;
            Final_Term__c ft = new Final_Term__c(Dealer_Disc_to_Customer__c = '12345', Loan_Application__c = opp.Id);
            ft.CRM_IRR__c = 120;            
            ft.Holiday_period__c='30';
            ft.EMI_Amount__c= 10000;
            ft.vehicle_detail__c = vehicleDetail1.Id;
            insert ft;
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockCombinedBRE());
            String str = IntegrationEngine.combinedBRE(opp.Id,vehicleDetail1.Id); 
            HttpResponse response = new HttpResponse();
            //response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5nhbsSGnEOy7Ai5TEbBgZ3uJ54wvjUHpk2lskoOqH0f739CEfxfBNdgezTzrBwn0f+v0OlfGLLOGSmOC/qDikyUEvMpZtPfjFRqwr8bP9YQQ1ggNkXR568Fwpa7niw2vpq791iZyvHfQ+QZGeBc5Y/BCqtOUVsZX4vH6hra569Mz7kQi1y+UWmWCLGpWD79V5o9KnXKh/OW3ZsxM9+bdkScwndP9mMQWUPw99AALawhVkv9YD05/P2LwbIw1T+dS1z2jUbNXbajrM/N5ui9/+VZLn78x6hjy/oNjrWV4Vz2Qk9dbhEDsC/quZHY4x6tsqX4="}');
            response.setBody('{"JData":"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"}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }
    @isTest
    static void tractorOfferEngine_Test(){
        try{
        Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c from Opportunity LIMIT 1];            
            Vehicle_Detail__c  vehicleDetail1 = TestDataUtility.createTestVehicleDetailForIbb(false, opp);
            vehicleDetail1.Vehicle_Type__c = 'New';
            vehicleDetail1.Variant_Code__c = 'TEICH364TR';
            vehicleDetail1.Vehicle_SubType__c = 'Tractor';
            vehicleDetail1.Variant__c = 'EICHER 364DI 35HP';
            insert vehicleDetail1;
            Final_Term__c ft = new Final_Term__c(Dealer_Disc_to_Customer__c = '12345', Loan_Application__c = opp.Id);
            ft.CRM_IRR__c = 120;            
            ft.Holiday_period__c='30';
            ft.EMI_Amount__c= 10000;
            ft.vehicle_detail__c = vehicleDetail1.Id;
            insert ft;
            String str = '{"loanAmount":"1000000","crmIrrRequested":"15"}';
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockTractorOfferEngine());
            String strResponse = IntegrationEngine.tractorOfferEngine(opp.Id,vehicleDetail1.Id,'Insurance Details',str); 
            HttpResponse response = new HttpResponse();
            response.setBody('{"JData":"1F3ukS89iNZyq2s85KlipY/rxwx4sxynkPHfmqcfAu8m0R9TInX6HZasYKvQxcmyK45zdRM7MtjJeEX5hLnbIiwrnuD0PmjIl3/D3HaOpEMDej2VDAnJhwl5U2EbsXjMyGmOsXIeTkCbuunzeDIaUWbvaCK/AFo4LpNM8chpPgat74NC8SVwk63bUbL6k1YTGxwy8SqDZz8eWzCYFzcsyftKSBo9p5LpqZJ4tanoXgLapAtXzG7YRylWB4fpPgyDxX68ANlwYjAddq9CHKisywELgMthcGtGp25OQHywVc2kV41LLkcQYU/zlfbxU3fwBuAIm2OVZcy0jgFDWTY+Q1qSgzsFp0egx8y2RS1V2GQo6GbsJiWL388V2lw9fNqEppYjWEzBVGG+RbWc/fW9dFo7NcXhRA4m45zwvpZY5vX3KG3l/tQeR8MSPkF0AkEtwE8Yhc+yFMwytTVqd4FLW/F70dAFryl3F2cDs+XVT8MjC8ClEntd4DO43aqCzgnrEvygeXHwVHa50mxsgV0CvXkPH5Omzb/PI4yZJwtyyyIdRBpDcnhTjWUBvEzXODUANSzZ9UDlm3AQJG8nOrpOCNlZsDLq5YS0zI4rT9vxPVX2YzI8L3IAWBEW0lVo+pDme64HrdAlyAGnbjtjJSfImUUcJEZNZHyq6hAdDKaCSZWpY0R2vP4/+MEHtA98JVCH5fBTsyBry34fhLUFnkxhWU2iYGqN8C4BReE45APWPG/+P/S9tZsLkTxOUIOEYWAd+ST3gA9TSbPI9TBpqwa3R52QDXqFoSzbjzl3VPa6oqr1posdPnpzdvpLQmHzYd1ny+f/xeyUh0NdMbhX7MeOMacg0YqJ+xvHJsWCa2KDT8Qo+g9T7Ob1dzyWmhTwexSPWz6l2IrFdDQNw6Dy7gsUgpxQpB46o/xQGEqYnsBzluokulUwakraT8aqxP8Vf35Y6gRu4f1mmcY305JmI7Cm1AcKpGhwbBMhQaTHx/Qp890u9b7tCw+Nh7iRSLHpRijiPt+jDt12W74dyoRA6jm/WNnIKtIogG5rGDvxQyskxLVm7nbg05zKhK0Mj/zXD9hIjD8sagE+EnCxP1gS18YLM4NBFzU+OWuzthvd9ajylufwebnOnwqPxVFRZPKgwo2Pu2RDZEb4OaRoenTeonJdcN24DLAC1/HDKq45jRm9jj/nngQ8dfg0d8WZVSRjB9J0KDGqnD0Pzx5MZ/q0Q9bOO6yZPoaaoBC75UfXtEbLvauMHOcW3yV5+kgEpSvcvGKt96NS46r1jFqhzSK0GFGfG2ferhVZNFY6R5ZuIveEGdStjAKVuUPQSCfL+CpH+ApmYj8ZuyyveG1rqHWSM5zuDEX/b/Xj8dDyTUm8bmaosxJuDYp5rezlXwe6ng9bVcdffiRDWZIoJpKwEEm9vkRAVQ=="}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }
    
    
          @isTest
    		static void doTfGatingCheckEligibility_Test(){
       		 try{
       		 Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c from Opportunity LIMIT 1];            
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockdoTfGatingCheckEligibility());
            String strResponse = IntegrationEngine.doTractorGatingScreeningCheckEligibilityCallout(opp.Id); 
            HttpResponse response = new HttpResponse();
            response.setBody('{"JData":""}');
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }
                             
    @isTest
    static void doSchemeValidationCallout_Test(){
        try{
        Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c from Opportunity LIMIT 1];            
            Vehicle_Detail__c  vehicleDetail1 = TestDataUtility.createTestVehicleDetailForIbb(false, opp);
            vehicleDetail1.Vehicle_Type__c = 'New';
            vehicleDetail1.Variant_Code__c = 'TEICH364TR';
            vehicleDetail1.Vehicle_SubType__c = 'Tractor';
            vehicleDetail1.Variant__c = 'EICHER 364DI 35HP';
            insert vehicleDetail1;
            Product2 prd1 = new Product2();
            prd1.Asset_Category__c = 'te';
            prd1.Capacity_1__c = 1000.00;
            prd1.Capacity_2__c = 2000.00;
            prd1.Capacity_Units_1__c = 'test12';
            prd1.Capacity_Units_2__c = 'test13';
            prd1.Type__c = 'Make';
            prd1.External_Reference_Id__c = '58568568';
            prd1.Name = 'book';
            insert prd1;
            Schemes__c sch1 = new Schemes__c();
            sch1.ProductCode__c = prd1.Id;
            sch1.Unique_Identifier__c = 'test';
            sch1.FromDate__c = Date.newInstance(2022, 3, 31);
            sch1.ExistingCustomer__c = true;
            sch1.Scheme_Verification__c = 'Yes';
            sch1.Vehicle_Type__c = 'New';
            sch1.Scheme_Expiry__c = Date.newInstance(2026, 3, 31);
            sch1.Product__c = 'Two Wheeler';
            insert sch1;
            Final_Term__c ft = new Final_Term__c(Dealer_Disc_to_Customer__c = '12345', Loan_Application__c = opp.Id);
            ft.CRM_IRR__c = 120;            
            ft.Holiday_period__c='30';
            ft.EMI_Amount__c= 10000;
            ft.Schemes__c = sch1.Id;
            ft.vehicle_detail__c = vehicleDetail1.Id;
            insert ft;
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockdoSchemeValidationCallout());
            String str = IntegrationEngine.doSchemeValidationCallout(opp.Id,vehicleDetail1.Id); 
            HttpResponse response = new HttpResponse();
            //response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5nhbsSGnEOy7Ai5TEbBgZ3uJ54wvjUHpk2lskoOqH0f739CEfxfBNdgezTzrBwn0f+v0OlfGLLOGSmOC/qDikyUEvMpZtPfjFRqwr8bP9YQQ1ggNkXR568Fwpa7niw2vpq791iZyvHfQ+QZGeBc5Y/BCqtOUVsZX4vH6hra569Mz7kQi1y+UWmWCLGpWD79V5o9KnXKh/OW3ZsxM9+bdkScwndP9mMQWUPw99AALawhVkv9YD05/P2LwbIw1T+dS1z2jUbNXbajrM/N5ui9/+VZLn78x6hjy/oNjrWV4Vz2Qk9dbhEDsC/quZHY4x6tsqX4="}');
            response.setBody('{"JData":""}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }
                             
                             
    @isTest
    static void saveCustomerRelationDetails_Test(){
        try{
        	Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c from Opportunity LIMIT 1];
            Applicant__c app = [Select Id,Applicant_Type__c from Applicant__c where Opportunity__c =:opp.Id LIMIT 1];
            app.Applicant_Type__c = 'Borrower';
            app.Customer_Code__c = 'SU002499';
            update app;
            List<Applicant__c> appList = new List<Applicant__c>();
            Applicant__c applicant1 = TestDataUtility.createTestApplicantForSMS(false);
            applicant1.Opportunity__c=opp.Id;
            applicant1.Applicant_Type__c = 'Beneficiary';
            applicant1.Beneficial_Owner_Category__c = 'Beneficial Owner';
            applicant1.ShareHolding__c = 20;
            applicant1.Relationship_Type__c = '1';
            applicant1.Relationship_with_Entity__c = '10';
            appList.add(applicant1);
            Applicant__c applicant2 = TestDataUtility.createTestApplicantForSMS(false);
            applicant2.Opportunity__c=opp.Id;
            applicant2.Applicant_Type__c = 'Beneficiary';
            applicant2.Beneficial_Owner_Category__c = 'Authorised Signatory';
            applicant2.ShareHolding__c = 20;
            applicant2.Relationship_Type__c = '1';
            applicant2.Relationship_with_Entity__c = '10';
            appList.add(applicant2);
            if (Schema.sObjectType.Applicant__c.isCreateable()){
                insert appList;
            }
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockSaveCustomerRelationDetails());
            String str = IntegrationEngine.saveCustomerRelationDetails(app.Customer_Code__c,opp.Id); 
            HttpResponse response = new HttpResponse();
            response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5niTO0HGpEWrGII4BTYnRVlj2t1erM5ZckcdXMrJtzLZVnPkp2n255N6IT/x02vlNVagLBnI2btrIrjglLs0FNBXxZJPx7wI01qZmBTjpgaL4A=="}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }   
                             
    @isTest
    static void doPincodeBasedSearchCallout_Test(){
        try{
        Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c from Opportunity LIMIT 1];
            Applicant__c app = [Select Id,Applicant_Type__c from Applicant__c where Opportunity__c =:opp.Id LIMIT 1];
            app.Applicant_Type__c = 'Borrower';
            update app;
            String pincode = '600059';
            Test.startTest();
            Test.setMock(HttpCalloutMock.class, new MockPincodeBasedSearchCallout());
            String str = IntegrationEngine.doPincodeBasedSearchCallout(pincode,opp.Id,app.Id); 
            HttpResponse response = new HttpResponse();
            response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5nhbsSGnEOy7Ai5TEbBgZ3uJ54wvjUHpk2lskoOqH0f739CEfxfBNdgezTzrBwn0f+v0OlfGLLOGSmOC/qDikyUEvMpZtPfjFRqwr8bP9YQQ1ggNkXR568Fwpa7niw2vpq791iZyvHfQ+QZGeBc5Y/BCqtOUVsZX4vH6hra569Mz7kQi1y+UWmWCLGpWD79V5o9KnXKh/OW3ZsxM9+bdkScwndP9mMQWUPw99AALawhVkv9YD05/P2LwbIw1T+dS1z2jUbNXbajrM/N5ui9/+VZLn78x6hjy/oNjrWV4Vz2Qk9dbhEDsC/quZHY4x6tsqX4="}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    } 
    @isTest
    static void doOfferEngine_Test(){
        try{
        Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c,lead_number__c from Opportunity LIMIT 1];            
            Applicant__c app = [Select Id,Applicant_Type__c from Applicant__c where opportunity__c =:opp.Id];
            app.Applicant_Type__c = 'Borrower';
            update app;
            Vehicle_Detail__c  vehicleDetail1 = TestDataUtility.createTestVehicleDetailForIbb(false, opp);
            vehicleDetail1.Vehicle_Type__c = 'New';
            vehicleDetail1.Variant_Code__c = 'TEICH364TR';
            vehicleDetail1.Vehicle_SubType__c = 'Two-Wheeler';
            vehicleDetail1.Variant__c = 'EICHER 364DI 35HP';
            insert vehicleDetail1;
            Final_Term__c ft = new Final_Term__c(Dealer_Disc_to_Customer__c = '12345', Loan_Application__c = opp.Id);
            ft.CRM_IRR__c = 120;            
            ft.Holiday_period__c='30';
            ft.EMI_Amount__c= 10000;
            ft.vehicle_detail__c = vehicleDetail1.Id;
            insert ft;
            String loanId = opp.lead_number__c+'_B'+app.Id;
            String str = '{"VehicleType":"N","Threshold_Net_IRR":"7.0","Tenure":"12","Product":"TW","PayOuts":{"Referrer_Incentive":"","Provision_Cost":"1450","Mfr_Incentive_Amount":"0","Gift_Amt":"500","DSM_Incentive2":"500","DSM_Incentive1":"500","Dlr_Incentive_Amt_Sub":"500","Dlr_Incentive_Amt_Main":"500","Covid_Ins_Prem":""},"PayIns":{"Service_Charges":"100","Mfr_Exp_Reimbursement_Amount":"5000","Doc_Charges":"50","Dealer_Exp_Reimbursement_Amount":"5000"},"ORP":"149500","OfferDetails":{"offerTenure":"","offerLoanAmount":"","offerIrr":""},"Net_IRR_Requested":"","Monthly_Income":"700000","Maker_Id":"1001","LTV_Based_On":"Ex-showroom price","LTV":"70","Lead_Id":"'+loanId+'","Imputed_IRR_Requested":"","Funded_Insurance":"0","Finance_Amount":"70000","Existing_EMI":"0","Ex_Showroom_Price":"147000","CRM_IRR_Requested":"8.00","CallType":"OFFER","Advance_EMI_Flag":"No"}';
            Test.startTest();
            //Test.setMock(HttpCalloutMock.class, new MockTractorOfferEngine());
            IntegrationEngine.doOfferEngineCallout(str); 
            HttpResponse response = new HttpResponse();
            //response.setBody('{"JData":"1F3ukS89iNZyq2s85KlipY/rxwx4sxynkPHfmqcfAu8m0R9TInX6HZasYKvQxcmyK45zdRM7MtjJeEX5hLnbIiwrnuD0PmjIl3/D3HaOpEMDej2VDAnJhwl5U2EbsXjMyGmOsXIeTkCbuunzeDIaUWbvaCK/AFo4LpNM8chpPgat74NC8SVwk63bUbL6k1YTGxwy8SqDZz8eWzCYFzcsyftKSBo9p5LpqZJ4tanoXgLapAtXzG7YRylWB4fpPgyDxX68ANlwYjAddq9CHKisywELgMthcGtGp25OQHywVc2kV41LLkcQYU/zlfbxU3fwBuAIm2OVZcy0jgFDWTY+Q1qSgzsFp0egx8y2RS1V2GQo6GbsJiWL388V2lw9fNqEppYjWEzBVGG+RbWc/fW9dFo7NcXhRA4m45zwvpZY5vX3KG3l/tQeR8MSPkF0AkEtwE8Yhc+yFMwytTVqd4FLW/F70dAFryl3F2cDs+XVT8MjC8ClEntd4DO43aqCzgnrEvygeXHwVHa50mxsgV0CvXkPH5Omzb/PI4yZJwtyyyIdRBpDcnhTjWUBvEzXODUANSzZ9UDlm3AQJG8nOrpOCNlZsDLq5YS0zI4rT9vxPVX2YzI8L3IAWBEW0lVo+pDme64HrdAlyAGnbjtjJSfImUUcJEZNZHyq6hAdDKaCSZWpY0R2vP4/+MEHtA98JVCH5fBTsyBry34fhLUFnkxhWU2iYGqN8C4BReE45APWPG/+P/S9tZsLkTxOUIOEYWAd+ST3gA9TSbPI9TBpqwa3R52QDXqFoSzbjzl3VPa6oqr1posdPnpzdvpLQmHzYd1ny+f/xeyUh0NdMbhX7MeOMacg0YqJ+xvHJsWCa2KDT8Qo+g9T7Ob1dzyWmhTwexSPWz6l2IrFdDQNw6Dy7gsUgpxQpB46o/xQGEqYnsBzluokulUwakraT8aqxP8Vf35Y6gRu4f1mmcY305JmI7Cm1AcKpGhwbBMhQaTHx/Qp890u9b7tCw+Nh7iRSLHpRijiPt+jDt12W74dyoRA6jm/WNnIKtIogG5rGDvxQyskxLVm7nbg05zKhK0Mj/zXD9hIjD8sagE+EnCxP1gS18YLM4NBFzU+OWuzthvd9ajylufwebnOnwqPxVFRZPKgwo2Pu2RDZEb4OaRoenTeonJdcN24DLAC1/HDKq45jRm9jj/nngQ8dfg0d8WZVSRjB9J0KDGqnD0Pzx5MZ/q0Q9bOO6yZPoaaoBC75UfXtEbLvauMHOcW3yV5+kgEpSvcvGKt96NS46r1jFqhzSK0GFGfG2ferhVZNFY6R5ZuIveEGdStjAKVuUPQSCfL+CpH+ApmYj8ZuyyveG1rqHWSM5zuDEX/b/Xj8dDyTUm8bmaosxJuDYp5rezlXwe6ng9bVcdffiRDWZIoJpKwEEm9vkRAVQ=="}');
            response.setBody('{"JData":"oqbqzjszvSKTZVOhZc0NvXq/QQVVeeapVOTT+YM2NvxPbpDZsz90lOBrS00MjzKIZFe+0Kv4VRabrjIUZ9CbKyduAnRmOP+L2xaB+amgtVz/evZWnzPW8lJm0FyP4EK+neGQrNkT+OtNXYWKyse62deMP6Z7H0MU9E0gr6Km7jrp8cMiUuRHzLAiwTXPSrtmaSsRjDISusjLhrredoRS1UOAe3uUSNNWwJ74mt/B9VAuqHhPvtKl9nMsGfYGd85UIyE1ZdfxbuVZSdq3WAgbjyVxVz/qYowTkQ2bj4sQluOdYHKBbXzSKOrukJBpW6WBo45vzl2dB2Nx9dHMjb1dZXLTC0dqbvSm9/UaSbyQqr0bcGplemSZ6YtKavIA6K8khK7dKNkh+eSmrsFbOO+upFAIuIeP/25W1fEqKkaCsyZf7UYq37eL3ci3u7HUbOrDeZfA79qi7t2gCVusHXJR2asCmr9Kt56+t9k2UiQciEV7E0Qu/HVJQ9tbLoKsynk+"}');
            response.setStatusCode(200);
            Test.stopTest();            
        } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }
    @isTest
    static void doReverseStatusCallout_Test(){
    try{
    Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c,lead_number__c from Opportunity LIMIT 1];            
    List<IntegrationEngine.FlowInputs> fIptList = new List<IntegrationEngine.FlowInputs>(); 
    IntegrationEngine.FlowInputs fIpts = new IntegrationEngine.FlowInputs(); 
        fIpts.LoanId = opp.lead_number__c;
        fIpts.code = '101';
        fIpts.status = 'New';
        fIptList.add(fIpts);
        Test.startTest();
        IntegrationEngine.doReverseStatusCallout(fIptList);
        Test.stopTest();            
    }  
        catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
                             }
    @isTest
    static void doReverseStatusCallout_Test1(){
    try{
    Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c,lead_number__c,LeadSource from Opportunity LIMIT 1];            
    opp.LeadSource = 'OLA';
    update opp;    
    List<IntegrationEngine.FlowInputs> fIptList = new List<IntegrationEngine.FlowInputs>(); 
    IntegrationEngine.FlowInputs fIpts = new IntegrationEngine.FlowInputs(); 
        fIpts.LoanId = opp.lead_number__c;
        fIpts.code = '101';
        fIpts.status = 'New';
        fIptList.add(fIpts);
        Test.startTest();
        IntegrationEngine.doReverseStatusCallout(fIptList);
        Test.stopTest();            
    }  
        catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }
    }
	@isTest
    static void doSelfieReportAsyncCallout_Test(){
    try{
    Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c,lead_number__c,LeadSource from Opportunity LIMIT 1];            
    Applicant__c app = [Select Id from Applicant__c LIMIT 1];
    Documents__c docs = [Select Id from Documents__c LIMIT 1];    
        Test.startTest();
        IntegrationEngine.doSelfieReportAsyncCallout(app.Id,docs.Id,opp.Id);
        Test.stopTest();            
    }  
        catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }        
        
}
    @isTest
    static void doEPFOAuthCallout_Test(){
    try{
    Opportunity opp = [Select Id,Stagename,Sub_Stage__c,View_Application_Sub_Stages__c,Class_of_Activity__c,lead_number__c,LeadSource from Opportunity LIMIT 1];            
    Applicant__c app = [Select Id from Applicant__c LIMIT 1];
        String uan = '124235523453523';
        Test.startTest();
        IntegrationEngine.doEPFOAuthCallout(app.Id,uan,opp.Id);
        Test.stopTest();            
    }  
        catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }        
        
    }
@isTest
                        static void doKFSt_SMSTest(){
                            try{
                                        Opportunity oppp = new Opportunity(Name='Test Opportunity', Product_Type__c='Two Wheeler',Deal_Number__c='12345',CloseDate=Date.today(), StageName='Prospecting');
        insert oppp;
                                    Key_Fact_Statement__c kfsParent = new Key_Fact_Statement__c(Name = 'Test KFS Parent', Deal_Number__c = '12345');
        insert kfsParent;
        
           
                                        // String kfsRequestString = '{"pcdId":"","loanApplicationId"::"'+oppp.Id+',"fromProCredit":false,"Unique_Id":"123","dealId":""}';
                               String kfsRequestString =  JSON.serialize(new Map<String, Object>{'pcdId' => '','mobileNumber'=>'999999999', 'loanApplicationId' => oppp.Id,'fromProCredit' => false,'kfsId'=>kfsParent.Id,'kfsOtp'=>'1234','flag'=> 'KFS','dealId' => ''});
                                
                                        Test.startTest();
                                Test.setMock(HttpCalloutMock.class, new kfssmscalloutMock());
                                IntegrationEngine.doKFSSmsGatewayAPI(kfsRequestString);
                                
                                HttpResponse response = new HttpResponse();
            response.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5njZcJY00rL9wJSIMpbrzEBGczzs/qwlKFOA2/srolJ6l1djQPyCsWPhGnh7CqucCWPqwsLVYtyAskLBb8ekrCuV0I6EWnt6casm2A8pwPwYHxSL8yywIJdbrxEST5SXCk89YNYIsjy2D9FbOnFDumHX7HlvBul4+CmM9EX+8hBXhQ=="}');
            response.setStatusCode(200);
                             
                                Test.stopTest();  
                                 } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
                        }     
                        }
                        
                          private class kfssmscalloutMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
             res.setBody('{"JData":"bmvHXB5/b59ltoDPA8dwPKjM9zW1GwK5fvqA5/8G5njZcJY00rL9wJSIMpbrzEBGczzs/qwlKFOA2/srolJ6l1djQPyCsWPhGnh7CqucCWPqwsLVYtyAskLBb8ekrCuV0I6EWnt6casm2A8pwPwYHxSL8yywIJdbrxEST5SXCk89YNYIsjy2D9FbOnFDumHX7HlvBul4+CmM9EX+8hBXhQ=="}');
            res.setStatusCode(200);
            return res;
        }
                          }

    @isTest
      static void doKFSt_Test(){
                                 try{
                                        Opportunity oppp = new Opportunity(Name='Test Opportunity', Product_Type__c='Two Wheeler',Deal_Number__c='12345',CloseDate=Date.today(), StageName='Prospecting');
        insert oppp;
                                    
           
                                        // String kfsRequestString = '{"pcdId":"","loanApplicationId"::"'+oppp.Id+',"fromProCredit":false,"Unique_Id":"123","dealId":""}';
                               String kfsRequestString =  JSON.serialize(new Map<String, Object>{'pcdId' => '', 'loanApplicationId' => oppp.Id,'fromProCredit' => false,'Unique_Id' => 'UniqueID123','dealId' => ''});
                                        Test.startTest();
            Test.setMock(HttpCalloutMock.class, new kfscalloutMock());
            IntegrationEngine.doKFSCallout(kfsRequestString); 
            HttpResponse response = new HttpResponse();
            response.setBody('{"JData":""}');
            response.setStatusCode(200);
            Test.stopTest();  
                                 } catch(Exception ex){
            System.debug('error ---> ' + ex.getMessage());
            System.debug('error ---> ' + ex.getLineNumber());
        }    
                                 
            
                             }
                             
                               private class kfscalloutMock implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HttpResponse res = new HttpResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody('{"JData":""}');
            res.setStatusCode(200);
            return res;
        }
    }


}